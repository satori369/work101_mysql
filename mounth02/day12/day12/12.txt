前情回顾

1. 多进程多线程并发模型

   为每一个客户端单独创建进程或者线程，处理事物

   fork_server
   process_server
   thread_server

2. ftp文件服务器

3. IO 模型

   阻塞IO ： 默认形态  效率低  实现简单

   非阻塞IO ： 将阻塞行为变为非阻塞 超时检测

      setblocking()
      settimeout()

IO多路复用对比

    select :
      优点： 跨平台性好（win linux unix）
      缺点： 效率一般，最多监控1024个IO

    poll ：
      优点： 监控IO数量没有限制
      缺点： 跨平台一般（linux unix），效率一般

    epoll
      优点： 监控IO没有限制，效率高
      缺点: 跨平台性差 （linux）

    select，poll：
      * 每次监控IO都需要将应用层关注的IO映射给内核处理
      * 内核感知有IO准备就绪告知应用层，应用层需要再次
      轮寻找到就绪的IO

    epoll：
      * 直接将关注的IO放到内核空间进行监控，不必每次都从
      应用层映射给内容
      * 内核会直接提供就绪的IO给应用层处理
      * epoll提供了 EPOLLET的边缘触发方法，可以忽略不想
      处理的IO


httpserver2.0

功能分析： 实现一个功能类提供给用户使用，可以帮用户快速搭建
http服务，通过浏览器浏览用户的网页

技术分析： 1.tcp通信，基于http协议
         2. select 多路复用

实现类接口设计：

   1. 在用户使用的角度考量

      * 能替用户完成的功能，尽可能完成
      * 不能替用户决定的属性，让用户传入
      * 功能不能替用户决定，让用户重写

   2. 确定用户怎么用，需要什么参数，使用方法

      需要 ： 套接字
             网页

系统编程内容

Linux
  * linux命令
  * 操作系统功能
  * (操作系统配置部署)

IO
  * 文件IO   open  write  read
  * 网络IO   tcp通信  udp通信
  * IO模型   阻塞IO  非阻塞IO  IO多路服用  协程序

并发
  * 多任务编程： 进程   fork   Process
               线程   Thread

  * 多进程多线程并发 ，IO并发




















