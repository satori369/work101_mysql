前情回顾

1. 在线词典
　　
   * 需求分析　（构建原型）
   * 技术分析　(确定基本技术使用)
   * 数据库设计　（确定数据结构和数据格式，写入项目协议）
   * 模块划分　（确定封装模型，将整体分为若干功能）
   * 协议设定　　（请求类型等）
   * 网络通信搭建　（通信是一个优先级较高的工作）
   * 实现每个功能　　（注意每个功能测试）

cookie

json ： 数据格式 "{'xxx':'abc'}"  "[1,2,3,4]"

import json

json.dumps(dict/list)  将字典或者列表转换为json格式

json.loads(json)  将json数据解析为Python类型


cookie

让程序后台运行

  1. 程序第一行加解释器路径
     #! /usr/bin/env python3

  2. 设置程序的可执行权限
     chmod 774 httpserer.py

  3. 执行的时候后面加 &
     ./httpserver.py  &

  4. 如果想让程序在任意目录下都可以执行可以添加到/usr/bin下

     cd /usr/bin
     sudo  ln -s /home/tarena/.../httpserver.py  http

阶段总结

1. 数据结构

   * 逻辑结构和存储结构
   * 链表，栈，队列 （重要）
   * 二叉树 ，遍历方法和递归思想 （扩展）
   * 算法： 排序，查找

2. IO

   * 文件
   * 网络   理论多（tcp/ip协议，http协议）

     socket tcp udp （重点）

3. 进程： fork  Process （进程理论）

   线程:  threading (同步互斥)

   IO :  IO 多路复用  协程

4. 正则表达式

5. mysql

     数据库创建
     表操作
     增删改查
     pymysql

6. git 使用

代码 ： 聊天室  文件服务器   httpserver2.0
       在线词典   httpserver3.0

《核心编程 第三版》


吕泽：  lvze_word@126.com

互动刷屏

1. 二叉树： 遍历

   7  9  3  8  4  1  6  9  5  2 10

2. 僵尸进程 ： 子先退出，父没处理，浪费内容

       signal()
       wait()
       join()

3. 三次握手和四次挥手 ： tcp （可以适当注重标志位细节记忆）

4. struct  pack unpack

5. 进程   线程

      优点 ： 利用多核，同时执行多个任务
      缺点 ： 资源消耗高

   IO多路复用
      优点 ： 资源消耗少
      缺点： 本质是单进程，只能监听IO

6. io多路复用 ： 注意epoll poll select 特点 效率

7. 网络模型

8. 迭代器，生成器，可迭代对象
   深拷贝，浅拷贝
   python内存机制
   写过什么样的装饰器
   你对面向对象理解
   多继承   mro算法
   魔法方法

9. git

10. 死锁 ：  RLock

    避免死锁
      * 数据比较复杂，多个线程操作共享数据需谨慎
      * 排查时，不要所有的锁一起看，应该按照一个一个的逻辑梳理

11. 协程 ：  Tornado   gevent

    * 资源消耗少
    * 很高的IO并发量

    * async/await  asyncio  asynchttp
    * 进程 + 协程提高并发


